#####################################################################
# 	Print Start/Stop Macros
#####################################################################

[gcode_macro PRINT_START]
# For setting the parameters as persistent variables so they can be referenced in PRINT_START2
variable_bedtemp: 0
variable_hotendtemp: 0
variable_chambertemp: 0
gcode:
    {% set chamber_temp = params.CHAMBER_TEMP|default(0)|int %}
    {% set hotend_temp = params.EXTRUDER_TEMP|default(210)|int %}
    {% set bed_temp = params.BED_TEMP|default(60)|int %}


    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=bedtemp VALUE={bed_temp}	
	SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=hotendtemp VALUE={hotend_temp}	
	SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=chambertemp VALUE={chamber_temp}

    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0      											; cancel off timer (if there is one)
	UPDATE_DELAYED_GCODE ID=M191-WAIT DURATION=0 

	RESETSPEEDS																						; reset speeds to defaults

	LIGHTS_ON																						; turn on chamber lights

    #M104 S140
	_ECHO_INFO MSG="Bring bed to temp with 2 min bed soak..."										; set hotend to no-ooze temp
	G28																							    ; home
	PARKFRONTLOW					 																; move to front center of the bed
	M104 S140
	M190 S{bed_temp} 																				; warm bed
	G4 P120000                      																; wait min 2 min for bed to warm

	{% if not printer["temperature_sensor enclosure_temp"].temperature >= chamber_temp %}									; for now use extruder temp
		_ECHO_INFO MSG="Chamber not at temp yet, pausing..."	
    	PARKCENTER																					; - if chamber is not at temp yet:
		HEATSOAK T={bed_temp} MOVE=1																; heatsoak and park in center
		M190 S{bed_temp} 																			; wait for bed final temp
		M191 S{chamber_temp}																		; wait for chamber final temp, start PRINT_START2 when reached
	{% else %}
		_ECHO_INFO MSG="Chamber at or above temp."
		{% if printer.heater_bed.temperature < (bed_temp - 2) %}									; - if chamber is already at temp, but bed is not fully heated:
			HEATSOAK T={bed_temp} MOVE=1															; heatsoak and park
			M190 S{bed_temp} 																		; wait for bed final temp
		{% else %}																					; - if chamber + bed are already at temp:
			HEATSOAK T={bed_temp} MOVE=0															; "heatsoak" without parking (only still calling this because it does some other things like turn off exahaust fan)
		{% endif %}
		PRINT_START2																				; if at temp, continue print_start (part 2)
	{% endif %}

# !! As mentioned above, only split into two parts because of my junky M191 macro. There is no need to do this otherwise.
[gcode_macro PRINT_START2]
gcode:
	M106 S0																							; turn off part cooling fan (from heatsoak)
	BED_MESH_CLEAR																					; clear bed mesh
    _CG28                																			; conditionally home
	G90 													 										; absolute positioning
    _ECHO_INFO MSG="Mesh Bed Leveling"
	BED_MESH_CALIBRATE																				; mesh
	G28 Z																							; home z again
	PARKFRONTLOW
	_ECHO_INFO MSG="Heat extruder to final temp"
	M190 S{printer["gcode_macro PRINT_START"].bedtemp|int} 											; set & wait for bed temp
	M109 S{printer["gcode_macro PRINT_START"].hotendtemp|int} 										; set & wait for hotend final temp	
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1												; enable filament sensor
	_ECHO_INFO MSG="Purge Line....."
    PURGE
    PRIME_LINE 																						; draw prime line
	G90                             														
	G1 Z5.0
      
    _ECHO_INFO MSG="Starting Print: { printer.print_stats.filename }" 

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}		    															; reset base idle timeout
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0													; disable filament sensor
	UPDATE_DELAYED_GCODE ID=M191-WAIT DURATION=0    													; break chamber temp wait loop if it happens to be running
	CLEAR_PAUSE												
	M400                         	   																	; wait for buffer to clear
	G92 E0                                                                                              ; zero the extruder
    G1 E-2.0 F3600                                                                                     ; retract filament
	M104 S0						 	    			 													; turn only the hotend off
	M140 S0
	M107                         	   			 	 													; turn off part cooling fan
	G91                             							 										; relative positioning
    G1 Z5 F3000                  	    			 													; move nozzle up 5mm
    G90                           	    			 													; absolute positioning
	G1 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F19500.0  					; park nozzle at rear
	#BED_MESH_CLEAR																						; clear bed mesh
	UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=900	 												; turn everything off in 30 min
	RESETSPEEDS																							; reset speed, accel etc to configured max values
	_ECHO_INFO MSG="Print Finished: { printer.print_stats.filename }" 
	#DISABLE_MOTORS

#####################################################################
# 	PAUSE/RESUME/CANCEL
#####################################################################

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
	SDCARD_RESET_FILE
	PRINT_END
	_ECHO_INFO MSG="Print Canceled: { printer.print_stats.filename }" 
	BASE_CANCEL_PRINT

# Pause and park toolhead at front center. Z hop by 10mm.
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
	# Parameters
	{% set z = params.Z|default(10)|int %}																					; z hop amount
	
	{% if printer['pause_resume'].is_paused|int == 0 %}		
		SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}									    						; set z hop variable for reference in resume macro
		SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}									; set hotend temp variable for reference in resume macro
								
		SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0																	; disable filament sensor		
		SAVE_GCODE_STATE NAME=PAUSE																							; save current print position for resume				
		BASE_PAUSE																											; pause print
		{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}										; check that zhop doesn't exceed z max
			G91																												; relative positioning
			G1 Z{z} F900																									; raise Z up by z hop amount
		{% else %}
			_ECHO_INFO MSG="Pause zhop exceeds maximum Z height."													; if z max is exceeded, show message and set zhop value for resume to 0
			SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
		{% endif %}
		G90																													; absolute positioning
		G1 XG0 X{printer.toolhead.axis_maximum.x/2} YG0 Y{printer.toolhead.axis_minimum.y+10} F19500						; park toolhead at front center
		SAVE_GCODE_STATE NAME=PAUSEPARK																						; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)	
		M104 S0																												; turn off hotend
		SET_IDLE_TIMEOUT TIMEOUT=43200															    						; set timeout to 12 hours
	{% endif %}

# Return Z hop back down 10mm, prime nozzle, resume print.
[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
	# Parameters
	{% set e = params.E|default(2.5)|int %}																				; nozzle prime amount
	
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1																	; enable filament sensor
	#RESETRGB																											; reset LCD color
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}											; set timeout back to configured value
	{% if etemp > 0 %}
		M109 S{etemp|int}																								; wait for hotend to heat back up
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=450															; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)	
	G91																													; relative positioning
	M83																													; relative extruder positioning
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}												
		G1 Z{zhop * -1} E{e} F900																						; prime nozzle by E, lower Z back down
	{% else %}						
		G1 Z{zhop * -1} F900																							; lower Z back down	without priming (just in case we are testing the macro with cold hotend)
	{% endif %}								
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=450																; restore position
	_ECHO_INFO MSG="Resume Print: { printer.print_stats.filename }" 
	BASE_RESUME	



#####################################################################
# 	PURGE LINE
#####################################################################

# Prime Line
[gcode_macro PRIME_LINE]
description: Draw a prime line
gcode:
    SAVE_GCODE_STATE NAME=BEFORE_PRIME
    M117 Prime Line
    G0 X15.0 Y20.0 F5000.0  					; Go to X5 Y5
    G1 Z0.25 F600            				; Set nozzle height
    G92 E0.0                				; reset extrusion distance
    G1 X60.0 E9.0 F1000.0   				; intro line
    G1 X100.0 E10 F1000.0 					; intro line
    G92 E0.0                				; reset extrusion distance
    G1 Z1 F5000             				; Lift Z
    RESTORE_GCODE_STATE NAME=BEFORE_PRIME  

# Purge Line
[gcode_macro PURGE]
description: Draw a purge line
gcode:
    SAVE_GCODE_STATE NAME=BEFORE_PURGE
    M117 Purging
    G0 X15 Y20 F5000
    G91
    G1 E9 F1000
    G90
    RESTORE_GCODE_STATE NAME=BEFORE_PURGE
