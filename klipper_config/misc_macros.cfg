#####################################################################
# 	PARKING
#####################################################################

# Park front center
[gcode_macro PARKFRONT]
description: Park head in the front center of the bed
gcode:
	_CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} Z{printer.toolhead.axis_maximum.z/2} F19500		
	RESTORE_GCODE_STATE NAME=PARKFRONT
	
# Park front center, but low down
[gcode_macro PARKFRONTLOW]
description: Park head front center at 20mm above bed
gcode:
	_CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} Z10 F19500										
	RESTORE_GCODE_STATE NAME=PARKFRONT
	
# Park top rear left
[gcode_macro PARKREAR]
description: Park head in the upper rear corner
gcode:
	_CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKREAR
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F19500		
	RESTORE_GCODE_STATE NAME=PARKREAR

# Park center of build volume
[gcode_macro PARKCENTER]
description: Park head at the center of the build volume
gcode:
	_CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/3} F19500	
	RESTORE_GCODE_STATE NAME=PARKCENTER
	
# Park 15mm above center of bed
[gcode_macro PARKBED]
description: Park head 15mm above the center of bed
gcode:
	_CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKBED
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F19500										
	RESTORE_GCODE_STATE NAME=PARKBED

#####################################################################
# 	Sheet Offset Macros
#####################################################################

[gcode_macro PRUSA_SHEET]
gcode:
    SET_GCODE_OFFSET Z=-0.100
    
[gcode_macro ULTISTIK_SHEET]
description: Set gcode offset for Ultistik sheet
gcode:
    SET_GCODE_OFFSET Z=0.0

[gcode_macro WHAMBAM_SHEET]
description: Set gcode offset for Whambam sheet
gcode:
    SET_GCODE_OFFSET Z=0.0

[gcode_macro SET_GCODE_OFFSET]
description: Save and set adjusted gcode offset
rename_existing: _SET_GCODE_OFFSET
gcode:
    {% if printer.save_variables.variables.gcode_offsets %}
        {% set offsets = printer.save_variables.variables.gcode_offsets %}
    {% else %} 
        {% set offsets = {'x': None,'y': None,'z': None} %}
    {% endif %}
    
    {% set ns = namespace(offsets={'x': offsets.x,'y': offsets.y,'z': offsets.z}) %}
    
    _SET_GCODE_OFFSET {% for p in params %}{'%s=%s '% (p, params[p])}{% endfor %}

    {%if 'X' in params %}{% set null = ns.offsets.update({'x': params.X}) %}{% endif %}
    {%if 'Y' in params %}{% set null = ns.offsets.update({'y': params.Y}) %}{% endif %}
    {%if 'Z' in params %}{% set null = ns.offsets.update({'z': params.Z}) %}{% endif %}
	{%if 'Z_ADJUST' in params %}
		{% set tempoffset = offsets.z|float + params.Z_ADJUST|float %}
		{% set null = ns.offsets.update({'z': tempoffset}) %}
	{% endif %}
    SAVE_VARIABLE VARIABLE=gcode_offsets VALUE="{ns.offsets}"

# Load gcode offset from file on startup
[delayed_gcode LOAD_GCODE_OFFSETS]
initial_duration: 2
gcode:  
    {% if printer.save_variables.variables.gcode_offsets %}
        {% set offsets = printer.save_variables.variables.gcode_offsets %}

        _SET_GCODE_OFFSET {% for axis, offset in offsets.items()
            if offsets[axis] %}{ "%s=%s " % (axis, offset) }{% endfor %}

        { action_respond_info("Loaded gcode offsets from saved variables [%s]" % (offsets)) }
    {% endif %}|

#####################################################################
# 	LED LIGHTS
#####################################################################

[gcode_macro LIGHTS_ON]
gcode:
  SET_PIN PIN=caselight VALUE=0.6

[gcode_macro LIGHTS_OFF]
gcode:
  SET_PIN PIN=caselight VALUE=0.0

#####################################################################
# 	MISC
#####################################################################

# Just a shortcut to turn EVERYTHING off with one command (beds, heaters, motors, lights)
[gcode_macro OFF]
description: Turn off heaters and motor
gcode:
	DISABLE_MOTORS									; turn steppers off
    TURN_OFF_HEATERS								; turn bed / hotend off
    M107                         	   			 	; turn print cooling fan off
	LIGHTS_OFF
	#SET_FAN_SPEED FAN=Exhaust SPEED=0  			; turn exhaust fan off
	#SET_FAN_SPEED FAN=BedOuter SPEED=0				; bed fan off
	#SET_FAN_SPEED FAN=BedInner SPEED=0				; bed fan off

# Disable just the motors
[gcode_macro DISABLE_MOTORS]
description: Disable all motors
gcode:
    M18

[gcode_macro RESETSPEEDS]
description: Reset all speeds/accelerations
gcode:
	M220 S100
	M221 S100
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} 
	SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}  
	SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity} 

[delayed_gcode DELAYED_OFF]
gcode:
    _ECHO_INFO MSG="Delayed Off: Turning off everything"
	OFF  															; call "OFF" macro, to turn off everything (heaters, motors, lights, fans)

# _ECHO_INFO message to the console window
[gcode_macro _ECHO_INFO]
gcode:
    {action_respond_info(params.MSG|default('')|string)}
    M117 {params.MSG|default('')|string}

# Disable filament sensor 1 sec after startup, only enable during prints (in PRINT_START/PRINT_END)
[delayed_gcode DISABLEFILAMENTSENSOR]	
initial_duration: 1
gcode:
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0


#########  Search macro to help find printer objects  ###########
#########    example: SEARCH_VARS s="search term"     ###########
[gcode_macro SEARCH_VARS]
description: Search macro to help find printer objects 
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}
	
######################### CONFIG BACKUP #########################

# # https://github.com/th33xitus/kiauh/wiki/How-to-autocommit-config-changes-to-github%3F
[gcode_macro BACKUP_CFG]
gcode:
    RUN_SHELL_COMMAND CMD=backup_cfg
	
[gcode_shell_command backup_cfg]
command: python3 /home/pi/klipper_cfg_backup/VS.087/backup_cfg.py
timeout: 30.
verbose: True